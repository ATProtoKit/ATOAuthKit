//
//  OAuthAuthorizationRequestParameters.swift
//  ATOAuthKit
//
//  Created by Christopher Jr Riley on 2025-08-01.
//

import Foundation

/// A structure representing the full set of parameters used in an OAuth 2.0 or OpenID Connect
/// authorization request.
///
/// This struct encapsulates all fields necessary for compliant authorization flows, including
/// extensions such as PKCE, DPoP, and advanced OpenID Connect features. It can be used to
/// construct and parse requests to authorization endpoints.
public struct AuthorizationRequestParameters: Codable {

    /// The unique identifier for the client making the request.
    public let clientID: OAuthClientID

    /// An opaque value used by the client to maintain state between the request and callback. Optional.
    public let state: String?

    /// The redirection URI to which the response will be sent. Optional.
    public let redirectURI: OAuthRedirectURI?

    /// The requested scope values for the access token. Optional.
    public let scope: OAuthScope?

    /// The type of response desired from the authorization endpoint.
    public let responseType: OAuthResponseType

    /// A challenge generated by the client for Proof Key for Code Exchange (PKCE). Optional.
    public let codeChallenge: String?

    /// The method used to derive the code challenge for PKCE. Optional.
    public let codeChallengeMethod: OAuthCodeChallengeMethod?

    /// The DPoP (Demonstration of Proof-of-Possession) public key thumbprint. Optional.
    public let dPopJKT: String?

    /// Specifies how the authorization response should be returned to the client. Optional.
    public let responseMode: OAuthResponseMode?

    /// A string value used to associate a client session with an ID token, to mitigate
    /// replay attacks. Optional.
    public let nonce: String?

    /// The allowable elapsed time (in seconds) since the last active authentication of the user. Optional.
    ///
    /// Accepts either an integer or string-encoded integer.
    public let maxAge: Int?

    /// Additional information about the authentication and requested claims. Optional.
    ///
    /// Supports both object and string-encoded (JSON) claims as per OpenID Connect.
    public let claims: [OpenIDConnectEntityType: [OpenIDConnectClaimsParameter: [OpenIDConnectClaimsProperties?]]]?

    /// A hint to the Authorization Server about the login identifier the user might use
    /// to authenticate. Optional.
    ///
    /// Often used to pre-fill username/email fields.
    public let loginHint: String?

    /// Specifies the user interface locales for the authentication UI, in BCP47 format. Optional.
    public let locale: Locale?

    /// Previously issued ID Token passed as a hint to the authorization server.
    ///
    /// Commonly used for re-authentication or session management.
    public let idTokenHint: SignedJWT?

    /// The display mode to be used for the authentication UI. Optional.
    ///
    /// Allows requesting a specific kind of UI for the authorization step.
    public let display: Display?

    /// A prompt to control how the authorization server interacts with the user. Optional.
    ///
    /// Can be used to require re-authentication, consent, or account selection.
    public let prompt: Prompt?

    /// A set of additional authorization details as defined
    /// by [OAuth 2.0 Rich Authorization Requests](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-rar).
    /// Optional.
    ///
    /// Allows clients to describe complex requirements for the requested token.
    public let authorizationDetails: AuthorizationDetail?

    public init(from decoder: any Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        self.clientID = try container.decode(OAuthClientID.self, forKey: .clientID)
        self.state = try container.decodeIfPresent(String.self, forKey: .state)
        self.redirectURI = try container.decodeIfPresent(OAuthRedirectURI.self, forKey: .redirectURI)
        self.scope = try container.decodeIfPresent(OAuthScope.self, forKey: .scope)
        self.responseType = try container.decode(OAuthResponseType.self, forKey: .responseType)
        self.codeChallenge = try container.decodeIfPresent(String.self, forKey: .codeChallenge)
        self.codeChallengeMethod = try container.decodeIfPresent(OAuthCodeChallengeMethod.self, forKey: .codeChallengeMethod)
        self.dPopJKT = try container.decodeIfPresent(String.self, forKey: .dPopJKT)
        self.responseMode = try container.decodeIfPresent(OAuthResponseMode.self, forKey: .responseMode)
        self.nonce = try container.decodeIfPresent(String.self, forKey: .nonce)

        if let intValue = try? container.decodeIfPresent(Int.self, forKey: .maxAge) {
            self.maxAge = intValue
        } else if let stringValue = try? container.decodeIfPresent(String.self, forKey: .maxAge),
                  let intValue = Int(stringValue) {
            self.maxAge = intValue
        } else {
            self.maxAge = nil
        }

        if let claimsObject = try? container.decodeIfPresent(
            [OpenIDConnectEntityType: [OpenIDConnectClaimsParameter: [OpenIDConnectClaimsProperties?]]].self,
            forKey: .claims
        ) {
            self.claims = claimsObject
        } else if let claimsString = try? container.decodeIfPresent(String.self, forKey: .claims),
                  let data = claimsString.data(using: .utf8) {
            self.claims = try? JSONDecoder().decode(
                [OpenIDConnectEntityType: [OpenIDConnectClaimsParameter: [OpenIDConnectClaimsProperties?]]].self,
                from: data
            )
        } else {
            self.claims = nil
        }

        self.loginHint = try container.decodeIfPresent(String.self, forKey: .loginHint)
        self.locale = try container.decodeIfPresent(Locale.self, forKey: .locale)
        self.idTokenHint = try container.decodeIfPresent(SignedJWT.self, forKey: .idTokenHint)
        self.display = try container.decodeIfPresent(AuthorizationRequestParameters.Display.self, forKey: .display)
        self.prompt = try container.decodeIfPresent(AuthorizationRequestParameters.Prompt.self, forKey: .prompt)
        self.authorizationDetails = try container.decodeIfPresent(AuthorizationDetail.self, forKey: .authorizationDetails)
    }

    enum CodingKeys: String, CodingKey {
        case clientID = "client_id"
        case state
        case redirectURI = "redirect_uri"
        case scope
        case responseType = "response_type"
        case codeChallenge = "code_challenge"
        case codeChallengeMethod = "code_challenge_method"
        case dPopJKT = "dpop_jkt"
        case responseMode = "response_mode"
        case nonce
        case maxAge = "max_age"
        case claims
        case loginHint = "login_hint"
        case locale = "ui_locales"
        case idTokenHint = "id_token_hint"
        case display
        case prompt
        case authorizationDetails = "authorization_details"
    }

    /// The display mode to be used for the authentication UI.
    public enum Display: String, Codable {

        /// The authorization server should display authentication and consent UI as a full page.
        case page

        /// The authorization server should display UI as a popup window.
        case popup

        /// The server should optimize the display for devices with a touch interface.
        case touch

        /// The server should optimize the display for "Wireless Application Protocol" devices
        /// (legacy mobile).
        case wirelessApplicationProtocol = "wap"
    }

    /// A prompt to control how the authorization server interacts with the user.
    public enum Prompt: String, Codable {

        /// No interactive prompt.
        ///
        /// Errors if user interaction is required.
        case none

        /// The user must authenticate even if already logged in.
        case login

        /// The user must be prompted for consent before returning information.
        case consent

        /// The user must select an account if multiple are available.
        case selectAccount = "select_account"
    }
}
